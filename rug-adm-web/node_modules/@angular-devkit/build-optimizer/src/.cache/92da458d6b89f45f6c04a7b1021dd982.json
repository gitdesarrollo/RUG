{"remainingRequest":"C:\\angular\\src\\rug-parent\\rug-adm-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\angular\\src\\rug-parent\\rug-adm-web\\node_modules\\primeng\\components\\dom\\domhandler.js","dependencies":[{"path":"C:\\angular\\src\\rug-parent\\rug-adm-web\\node_modules\\primeng\\components\\dom\\domhandler.js","mtime":499162500000},{"path":"C:\\angular\\src\\rug-parent\\rug-adm-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\angular\\src\\rug-parent\\rug-adm-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar DomHandler = /*@__PURE__*/ (function () {\r\n    function DomHandler() {\r\n    }\r\n    DomHandler.addClass = function (element, className) {\r\n        if (element.classList)\r\n            element.classList.add(className);\r\n        else\r\n            element.className += ' ' + className;\r\n    };\r\n    DomHandler.addMultipleClasses = function (element, className) {\r\n        if (element.classList) {\r\n            var styles = className.split(' ');\r\n            for (var i = 0; i < styles.length; i++) {\r\n                element.classList.add(styles[i]);\r\n            }\r\n        }\r\n        else {\r\n            var styles = className.split(' ');\r\n            for (var i = 0; i < styles.length; i++) {\r\n                element.className += ' ' + styles[i];\r\n            }\r\n        }\r\n    };\r\n    DomHandler.removeClass = function (element, className) {\r\n        if (element.classList)\r\n            element.classList.remove(className);\r\n        else\r\n            element.className = element.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\r\n    };\r\n    DomHandler.hasClass = function (element, className) {\r\n        if (element.classList)\r\n            return element.classList.contains(className);\r\n        else\r\n            return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);\r\n    };\r\n    DomHandler.siblings = function (element) {\r\n        return Array.prototype.filter.call(element.parentNode.children, function (child) {\r\n            return child !== element;\r\n        });\r\n    };\r\n    DomHandler.find = function (element, selector) {\r\n        return Array.from(element.querySelectorAll(selector));\r\n    };\r\n    DomHandler.findSingle = function (element, selector) {\r\n        if (element) {\r\n            return element.querySelector(selector);\r\n        }\r\n        return null;\r\n    };\r\n    DomHandler.index = function (element) {\r\n        var children = element.parentNode.childNodes;\r\n        var num = 0;\r\n        for (var i = 0; i < children.length; i++) {\r\n            if (children[i] == element)\r\n                return num;\r\n            if (children[i].nodeType == 1)\r\n                num++;\r\n        }\r\n        return -1;\r\n    };\r\n    DomHandler.indexWithinGroup = function (element, attributeName) {\r\n        var children = element.parentNode.childNodes;\r\n        var num = 0;\r\n        for (var i = 0; i < children.length; i++) {\r\n            if (children[i] == element)\r\n                return num;\r\n            if (children[i].attributes && children[i].attributes[attributeName] && children[i].nodeType == 1)\r\n                num++;\r\n        }\r\n        return -1;\r\n    };\r\n    DomHandler.relativePosition = function (element, target) {\r\n        var elementDimensions = element.offsetParent ? { width: element.offsetWidth, height: element.offsetHeight } : this.getHiddenElementDimensions(element);\r\n        var targetHeight = target.offsetHeight;\r\n        var targetOffset = target.getBoundingClientRect();\r\n        var viewport = this.getViewport();\r\n        var top, left;\r\n        if ((targetOffset.top + targetHeight + elementDimensions.height) > viewport.height) {\r\n            top = -1 * (elementDimensions.height);\r\n            if (targetOffset.top + top < 0) {\r\n                top = -1 * targetOffset.top;\r\n            }\r\n        }\r\n        else {\r\n            top = targetHeight;\r\n        }\r\n        if (elementDimensions.width > viewport.width) {\r\n            // element wider then viewport and cannot fit on screen (align at left side of viewport)\r\n            left = targetOffset.left * -1;\r\n        }\r\n        else if ((targetOffset.left + elementDimensions.width) > viewport.width) {\r\n            // element wider then viewport but can be fit on screen (align at right side of viewport)\r\n            left = (targetOffset.left + elementDimensions.width - viewport.width) * -1;\r\n        }\r\n        else {\r\n            // element fits on screen (align with target)\r\n            left = 0;\r\n        }\r\n        element.style.top = top + 'px';\r\n        element.style.left = left + 'px';\r\n    };\r\n    DomHandler.absolutePosition = function (element, target) {\r\n        var elementDimensions = element.offsetParent ? { width: element.offsetWidth, height: element.offsetHeight } : this.getHiddenElementDimensions(element);\r\n        var elementOuterHeight = elementDimensions.height;\r\n        var elementOuterWidth = elementDimensions.width;\r\n        var targetOuterHeight = target.offsetHeight;\r\n        var targetOuterWidth = target.offsetWidth;\r\n        var targetOffset = target.getBoundingClientRect();\r\n        var windowScrollTop = this.getWindowScrollTop();\r\n        var windowScrollLeft = this.getWindowScrollLeft();\r\n        var viewport = this.getViewport();\r\n        var top, left;\r\n        if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {\r\n            top = targetOffset.top + windowScrollTop - elementOuterHeight;\r\n            if (top < 0) {\r\n                top = windowScrollTop;\r\n            }\r\n        }\r\n        else {\r\n            top = targetOuterHeight + targetOffset.top + windowScrollTop;\r\n        }\r\n        if (targetOffset.left + targetOuterWidth + elementOuterWidth > viewport.width)\r\n            left = Math.max(0, targetOffset.left + windowScrollLeft + targetOuterWidth - elementOuterWidth);\r\n        else\r\n            left = targetOffset.left + windowScrollLeft;\r\n        element.style.top = top + 'px';\r\n        element.style.left = left + 'px';\r\n    };\r\n    DomHandler.getHiddenElementOuterHeight = function (element) {\r\n        element.style.visibility = 'hidden';\r\n        element.style.display = 'block';\r\n        var elementHeight = element.offsetHeight;\r\n        element.style.display = 'none';\r\n        element.style.visibility = 'visible';\r\n        return elementHeight;\r\n    };\r\n    DomHandler.getHiddenElementOuterWidth = function (element) {\r\n        element.style.visibility = 'hidden';\r\n        element.style.display = 'block';\r\n        var elementWidth = element.offsetWidth;\r\n        element.style.display = 'none';\r\n        element.style.visibility = 'visible';\r\n        return elementWidth;\r\n    };\r\n    DomHandler.getHiddenElementDimensions = function (element) {\r\n        var dimensions = {};\r\n        element.style.visibility = 'hidden';\r\n        element.style.display = 'block';\r\n        dimensions.width = element.offsetWidth;\r\n        dimensions.height = element.offsetHeight;\r\n        element.style.display = 'none';\r\n        element.style.visibility = 'visible';\r\n        return dimensions;\r\n    };\r\n    DomHandler.scrollInView = function (container, item) {\r\n        var borderTopValue = getComputedStyle(container).getPropertyValue('borderTopWidth');\r\n        var borderTop = borderTopValue ? parseFloat(borderTopValue) : 0;\r\n        var paddingTopValue = getComputedStyle(container).getPropertyValue('paddingTop');\r\n        var paddingTop = paddingTopValue ? parseFloat(paddingTopValue) : 0;\r\n        var containerRect = container.getBoundingClientRect();\r\n        var itemRect = item.getBoundingClientRect();\r\n        var offset = (itemRect.top + document.body.scrollTop) - (containerRect.top + document.body.scrollTop) - borderTop - paddingTop;\r\n        var scroll = container.scrollTop;\r\n        var elementHeight = container.clientHeight;\r\n        var itemHeight = this.getOuterHeight(item);\r\n        if (offset < 0) {\r\n            container.scrollTop = scroll + offset;\r\n        }\r\n        else if ((offset + itemHeight) > elementHeight) {\r\n            container.scrollTop = scroll + offset - elementHeight + itemHeight;\r\n        }\r\n    };\r\n    DomHandler.fadeIn = function (element, duration) {\r\n        element.style.opacity = 0;\r\n        var last = +new Date();\r\n        var opacity = 0;\r\n        var tick = function () {\r\n            opacity = +element.style.opacity.replace(\",\", \".\") + (new Date().getTime() - last) / duration;\r\n            element.style.opacity = opacity;\r\n            last = +new Date();\r\n            if (+opacity < 1) {\r\n                (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);\r\n            }\r\n        };\r\n        tick();\r\n    };\r\n    DomHandler.fadeOut = function (element, ms) {\r\n        var opacity = 1, interval = 50, duration = ms, gap = interval / duration;\r\n        var fading = setInterval(function () {\r\n            opacity = opacity - gap;\r\n            if (opacity <= 0) {\r\n                opacity = 0;\r\n                clearInterval(fading);\r\n            }\r\n            element.style.opacity = opacity;\r\n        }, interval);\r\n    };\r\n    DomHandler.getWindowScrollTop = function () {\r\n        var doc = document.documentElement;\r\n        return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\r\n    };\r\n    DomHandler.getWindowScrollLeft = function () {\r\n        var doc = document.documentElement;\r\n        return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\r\n    };\r\n    DomHandler.matches = function (element, selector) {\r\n        var p = Element.prototype;\r\n        var f = p['matches'] || p.webkitMatchesSelector || p['mozMatchesSelector'] || p['msMatchesSelector'] || function (s) {\r\n            return [].indexOf.call(document.querySelectorAll(s), this) !== -1;\r\n        };\r\n        return f.call(element, selector);\r\n    };\r\n    DomHandler.getOuterWidth = function (el, margin) {\r\n        var width = el.offsetWidth;\r\n        if (margin) {\r\n            var style = getComputedStyle(el);\r\n            width += parseFloat(style.marginLeft) + parseFloat(style.marginRight);\r\n        }\r\n        return width;\r\n    };\r\n    DomHandler.getHorizontalPadding = function (el) {\r\n        var style = getComputedStyle(el);\r\n        return parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);\r\n    };\r\n    DomHandler.getHorizontalMargin = function (el) {\r\n        var style = getComputedStyle(el);\r\n        return parseFloat(style.marginLeft) + parseFloat(style.marginRight);\r\n    };\r\n    DomHandler.innerWidth = function (el) {\r\n        var width = el.offsetWidth;\r\n        var style = getComputedStyle(el);\r\n        width += parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);\r\n        return width;\r\n    };\r\n    DomHandler.width = function (el) {\r\n        var width = el.offsetWidth;\r\n        var style = getComputedStyle(el);\r\n        width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);\r\n        return width;\r\n    };\r\n    DomHandler.getInnerHeight = function (el) {\r\n        var height = el.offsetHeight;\r\n        var style = getComputedStyle(el);\r\n        height += parseFloat(style.paddingTop) + parseFloat(style.paddingBottom);\r\n        return height;\r\n    };\r\n    DomHandler.getOuterHeight = function (el, margin) {\r\n        var height = el.offsetHeight;\r\n        if (margin) {\r\n            var style = getComputedStyle(el);\r\n            height += parseFloat(style.marginTop) + parseFloat(style.marginBottom);\r\n        }\r\n        return height;\r\n    };\r\n    DomHandler.getHeight = function (el) {\r\n        var height = el.offsetHeight;\r\n        var style = getComputedStyle(el);\r\n        height -= parseFloat(style.paddingTop) + parseFloat(style.paddingBottom) + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);\r\n        return height;\r\n    };\r\n    DomHandler.getWidth = function (el) {\r\n        var width = el.offsetWidth;\r\n        var style = getComputedStyle(el);\r\n        width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight) + parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth);\r\n        return width;\r\n    };\r\n    DomHandler.getViewport = function () {\r\n        var win = window, d = document, e = d.documentElement, g = d.getElementsByTagName('body')[0], w = win.innerWidth || e.clientWidth || g.clientWidth, h = win.innerHeight || e.clientHeight || g.clientHeight;\r\n        return { width: w, height: h };\r\n    };\r\n    DomHandler.getOffset = function (el) {\r\n        var rect = el.getBoundingClientRect();\r\n        return {\r\n            top: rect.top + document.body.scrollTop,\r\n            left: rect.left + document.body.scrollLeft\r\n        };\r\n    };\r\n    DomHandler.replaceElementWith = function (element, replacementElement) {\r\n        var parentNode = element.parentNode;\r\n        if (!parentNode)\r\n            throw \"Can't replace element\";\r\n        return parentNode.replaceChild(replacementElement, element);\r\n    };\r\n    DomHandler.getUserAgent = function () {\r\n        return navigator.userAgent;\r\n    };\r\n    DomHandler.isIE = function () {\r\n        var ua = window.navigator.userAgent;\r\n        var msie = ua.indexOf('MSIE ');\r\n        if (msie > 0) {\r\n            // IE 10 or older => return version number\r\n            return true;\r\n        }\r\n        var trident = ua.indexOf('Trident/');\r\n        if (trident > 0) {\r\n            // IE 11 => return version number\r\n            var rv = ua.indexOf('rv:');\r\n            return true;\r\n        }\r\n        var edge = ua.indexOf('Edge/');\r\n        if (edge > 0) {\r\n            // Edge (IE 12+) => return version number\r\n            return true;\r\n        }\r\n        // other browser\r\n        return false;\r\n    };\r\n    DomHandler.isIOS = function () {\r\n        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window['MSStream'];\r\n    };\r\n    DomHandler.isAndroid = function () {\r\n        return /(android)/i.test(navigator.userAgent);\r\n    };\r\n    DomHandler.appendChild = function (element, target) {\r\n        if (this.isElement(target))\r\n            target.appendChild(element);\r\n        else if (target.el && target.el.nativeElement)\r\n            target.el.nativeElement.appendChild(element);\r\n        else\r\n            throw 'Cannot append ' + target + ' to ' + element;\r\n    };\r\n    DomHandler.removeChild = function (element, target) {\r\n        if (this.isElement(target))\r\n            target.removeChild(element);\r\n        else if (target.el && target.el.nativeElement)\r\n            target.el.nativeElement.removeChild(element);\r\n        else\r\n            throw 'Cannot remove ' + element + ' from ' + target;\r\n    };\r\n    DomHandler.isElement = function (obj) {\r\n        return (typeof HTMLElement === \"object\" ? obj instanceof HTMLElement :\r\n            obj && typeof obj === \"object\" && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === \"string\");\r\n    };\r\n    DomHandler.calculateScrollbarWidth = function (el) {\r\n        if (el) {\r\n            var style = getComputedStyle(el);\r\n            return (el.offsetWidth - el.clientWidth - parseFloat(style.borderLeftWidth) - parseFloat(style.borderRightWidth));\r\n        }\r\n        else {\r\n            if (this.calculatedScrollbarWidth !== null)\r\n                return this.calculatedScrollbarWidth;\r\n            var scrollDiv = document.createElement(\"div\");\r\n            scrollDiv.className = \"ui-scrollbar-measure\";\r\n            document.body.appendChild(scrollDiv);\r\n            var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\r\n            document.body.removeChild(scrollDiv);\r\n            this.calculatedScrollbarWidth = scrollbarWidth;\r\n            return scrollbarWidth;\r\n        }\r\n    };\r\n    DomHandler.calculateScrollbarHeight = function () {\r\n        if (this.calculatedScrollbarHeight !== null)\r\n            return this.calculatedScrollbarHeight;\r\n        var scrollDiv = document.createElement(\"div\");\r\n        scrollDiv.className = \"ui-scrollbar-measure\";\r\n        document.body.appendChild(scrollDiv);\r\n        var scrollbarHeight = scrollDiv.offsetHeight - scrollDiv.clientHeight;\r\n        document.body.removeChild(scrollDiv);\r\n        this.calculatedScrollbarWidth = scrollbarHeight;\r\n        return scrollbarHeight;\r\n    };\r\n    DomHandler.invokeElementMethod = function (element, methodName, args) {\r\n        element[methodName].apply(element, args);\r\n    };\r\n    DomHandler.clearSelection = function () {\r\n        if (window.getSelection) {\r\n            if (window.getSelection().empty) {\r\n                window.getSelection().empty();\r\n            }\r\n            else if (window.getSelection().removeAllRanges && window.getSelection().rangeCount > 0 && window.getSelection().getRangeAt(0).getClientRects().length > 0) {\r\n                window.getSelection().removeAllRanges();\r\n            }\r\n        }\r\n        else if (document['selection'] && document['selection'].empty) {\r\n            try {\r\n                document['selection'].empty();\r\n            }\r\n            catch (error) {\r\n                //ignore IE bug\r\n            }\r\n        }\r\n    };\r\n    DomHandler.getBrowser = function () {\r\n        if (!this.browser) {\r\n            var matched = this.resolveUserAgent();\r\n            this.browser = {};\r\n            if (matched.browser) {\r\n                this.browser[matched.browser] = true;\r\n                this.browser['version'] = matched.version;\r\n            }\r\n            if (this.browser['chrome']) {\r\n                this.browser['webkit'] = true;\r\n            }\r\n            else if (this.browser['webkit']) {\r\n                this.browser['safari'] = true;\r\n            }\r\n        }\r\n        return this.browser;\r\n    };\r\n    DomHandler.resolveUserAgent = function () {\r\n        var ua = navigator.userAgent.toLowerCase();\r\n        var match = /(chrome)[ \\/]([\\w.]+)/.exec(ua) ||\r\n            /(webkit)[ \\/]([\\w.]+)/.exec(ua) ||\r\n            /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) ||\r\n            /(msie) ([\\w.]+)/.exec(ua) ||\r\n            ua.indexOf(\"compatible\") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(ua) ||\r\n            [];\r\n        return {\r\n            browser: match[1] || \"\",\r\n            version: match[2] || \"0\"\r\n        };\r\n    };\r\n    DomHandler.isInteger = function (value) {\r\n        if (Number.isInteger) {\r\n            return Number.isInteger(value);\r\n        }\r\n        else {\r\n            return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n        }\r\n    };\r\n    DomHandler.isHidden = function (element) {\r\n        return element.offsetParent === null;\r\n    };\r\n    DomHandler.zindex = 1000;\r\n    DomHandler.calculatedScrollbarWidth = null;\r\n    DomHandler.calculatedScrollbarHeight = null;\r\n    return DomHandler;\r\n}());\r\nexports.DomHandler = DomHandler;\r\n",null]}