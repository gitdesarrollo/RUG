{"remainingRequest":"C:\\angular\\src\\rug-parent\\rug-adm-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\angular\\src\\rug-parent\\rug-adm-web\\node_modules\\@toverux\\ngx-sweetalert2\\esm5\\toverux-ngx-sweetalert2.js","dependencies":[{"path":"C:\\angular\\src\\rug-parent\\rug-adm-web\\node_modules\\@toverux\\ngx-sweetalert2\\esm5\\toverux-ngx-sweetalert2.js","mtime":1520460150000},{"path":"C:\\angular\\src\\rug-parent\\rug-adm-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\angular\\src\\rug-parent\\rug-adm-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import swal from 'sweetalert2';\nimport { InjectionToken, ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output, ComponentFactoryResolver, Directive, HostListener, ViewContainerRef, TemplateRef, ApplicationRef, Host, Injector, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nvar SwalPartialTargets = /*@__PURE__*/ (function () {\n    function SwalPartialTargets() {\n        this.title = function () { return swal.getTitle(); };\n        this.content = function () { return swal.getContent(); };\n        this.buttonsWrapper = function () { return swal.getButtonsWrapper(); };\n        this.actions = function () { return swal.getActions(); };\n        this.confirmButton = function () { return swal.getConfirmButton(); };\n        this.cancelButton = function () { return swal.getCancelButton(); };\n        this.footer = function () { return swal.getFooter(); };\n    }\n    return SwalPartialTargets;\n}());\nvar SwalDefaults = new InjectionToken('SwalDefaults');\nfunction swalDefaultsProvider(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return {\n        provide: SwalDefaults,\n        useValue: options\n    };\n}\nvar SwalComponent = /*@__PURE__*/ (function () {\n    function SwalComponent(defaultSwalOptions) {\n        this.defaultSwalOptions = defaultSwalOptions;\n        this.beforeOpen = new EventEmitter();\n        this.open = new EventEmitter();\n        this.close = new EventEmitter();\n        this.confirm = new EventEmitter();\n        this.cancel = new EventEmitter();\n        this.nativeSwal = swal;\n        this.isCurrentlyShown = false;\n        this.touchedProps = new Set();\n        this.markTouched = this.touchedProps.add.bind(this.touchedProps);\n        this.show = this.show.bind(this);\n    }\n    Object.defineProperty(SwalComponent.prototype, \"options\", {\n        get: function () {\n            var _this = this;\n            var options = {};\n            this.touchedProps.forEach(function (prop) {\n                options[prop] = ((_this))[prop];\n            });\n            return options;\n        },\n        set: function (options) {\n            Object.assign(this, options);\n            Object.keys(options).forEach(this.markTouched);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SwalComponent.prototype.ngOnChanges = function (changes) {\n        Object.keys(changes)\n            .filter(function (prop) { return prop !== 'options'; })\n            .forEach(this.markTouched);\n    };\n    SwalComponent.prototype.ngOnDestroy = function () {\n        if (this.isCurrentlyShown) {\n            swal.close();\n        }\n    };\n    SwalComponent.prototype.show = function () {\n        var _this = this;\n        var options = Object.assign({}, this.defaultSwalOptions, this.options, { onBeforeOpen: function (modalElement) {\n                _this.beforeOpen.emit({ modalElement: modalElement });\n            }, onOpen: function (modalElement) {\n                _this.isCurrentlyShown = true;\n                _this.open.emit({ modalElement: modalElement });\n            }, onClose: function (modalElement) {\n                _this.isCurrentlyShown = false;\n                _this.close.emit({ modalElement: modalElement });\n            } });\n        var promise = swal(options);\n        var useRejections = ((options)).useRejections;\n        promise.then(function (result) {\n            if (useRejections) {\n                _this.confirm.emit(result);\n            }\n            else if ('value' in result) {\n                _this.confirm.emit(result.value);\n            }\n            else {\n                _this.cancel.emit(result.dismiss);\n            }\n        }, function (err) {\n            if (useRejections) {\n                _this.cancel.emit(err);\n            }\n        });\n        return promise;\n    };\n    return SwalComponent;\n}());\nvar SwalDirective = /*@__PURE__*/ (function () {\n    function SwalDirective(viewContainerRef, resolver) {\n        this.viewContainerRef = viewContainerRef;\n        this.resolver = resolver;\n        this.confirm = new EventEmitter();\n        this.cancel = new EventEmitter();\n    }\n    Object.defineProperty(SwalDirective.prototype, \"swal\", {\n        set: function (options) {\n            if (options instanceof SwalComponent) {\n                this.swalInstance = options;\n            }\n            else if (Array.isArray(options)) {\n                this.swalOptions = swal.argsToParams(options);\n            }\n            else {\n                this.swalOptions = options;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SwalDirective.prototype.ngOnInit = function () {\n        if (!this.swalInstance) {\n            var factory = this.resolver.resolveComponentFactory(SwalComponent);\n            this.swalRef = this.viewContainerRef.createComponent(factory);\n            this.swalInstance = this.swalRef.instance;\n        }\n    };\n    SwalDirective.prototype.ngOnDestroy = function () {\n        if (this.swalRef) {\n            this.swalRef.destroy();\n        }\n    };\n    SwalDirective.prototype.onHostClicked = function (event) {\n        var _this = this;\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n        if (this.swalOptions) {\n            this.swalInstance.options = this.swalOptions;\n        }\n        var confirmSub = this.swalInstance.confirm.asObservable().subscribe(function (v) { return _this.confirm.emit(v); });\n        var cancelSub = this.swalInstance.cancel.asObservable().subscribe(function (v) { return _this.cancel.emit(v); });\n        this.swalInstance.show().then(unsubscribe);\n        function unsubscribe() {\n            confirmSub.unsubscribe();\n            cancelSub.unsubscribe();\n        }\n    };\n    return SwalDirective;\n}());\nvar SwalPartialComponent = /*@__PURE__*/ (function () {\n    function SwalPartialComponent() {\n    }\n    return SwalPartialComponent;\n}());\nvar SwalPartialDirective = /*@__PURE__*/ (function () {\n    function SwalPartialDirective(resolver, injector, app, templateRef, swalTargets, swalComponent) {\n        this.resolver = resolver;\n        this.injector = injector;\n        this.app = app;\n        this.templateRef = templateRef;\n        this.swalTargets = swalTargets;\n        this.swalComponent = swalComponent;\n    }\n    SwalPartialDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        this.beforeOpenSubscription = this.swalComponent.beforeOpen.asObservable().subscribe(function () {\n            var targetEl = _this.swalPartial ? _this.swalPartial() : _this.swalTargets.content();\n            var factory = _this.resolver.resolveComponentFactory(SwalPartialComponent);\n            _this.partialRef = factory.create(_this.injector, [], targetEl);\n            _this.partialRef.instance.template = _this.templateRef;\n            _this.app.attachView(_this.partialRef.hostView);\n        });\n        this.closeSubscription = this.swalComponent.close.asObservable().subscribe(function () {\n            _this.app.detachView(_this.partialRef.hostView);\n            _this.partialRef.destroy();\n        });\n    };\n    SwalPartialDirective.prototype.ngOnDestroy = function () {\n        this.beforeOpenSubscription.unsubscribe();\n        this.closeSubscription.unsubscribe();\n    };\n    return SwalPartialDirective;\n}());\nvar SweetAlert2Module = /*@__PURE__*/ (function () {\n    function SweetAlert2Module() {\n    }\n    SweetAlert2Module.forRoot = function (defaultSwalOptions) {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [swalDefaultsProvider(defaultSwalOptions)]\n        };\n    };\n    return SweetAlert2Module;\n}());\nexport { SwalPartialTargets, SwalComponent, SwalDirective, SwalPartialDirective, SweetAlert2Module, SwalDefaults as ɵa, swalDefaultsProvider as ɵb, SwalPartialComponent as ɵc };\n//# sourceMappingURL=toverux-ngx-sweetalert2.js.map\n",null]}